# coding: utf-8

"""
    Swagger CrowdSec

    CrowdSec local API

    The version of the OpenAPI document: 1.0.0
    Contact: contact@crowdsec.net
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from crowd_sec_python_sdk.pydantic.alert_labels import AlertLabels
from crowd_sec_python_sdk.pydantic.decision import Decision
from crowd_sec_python_sdk.pydantic.event import Event
from crowd_sec_python_sdk.pydantic.meta import Meta
from crowd_sec_python_sdk.pydantic.source import Source

class Alert(BaseModel):
    scenario: str = Field(alias='scenario')

    scenario_hash: str = Field(alias='scenario_hash')

    scenario_version: str = Field(alias='scenario_version')

    # a human readable message
    message: str = Field(alias='message')

    events_count: int = Field(alias='events_count')

    start_at: str = Field(alias='start_at')

    stop_at: str = Field(alias='stop_at')

    capacity: int = Field(alias='capacity')

    leakspeed: str = Field(alias='leakspeed')

    simulated: bool = Field(alias='simulated')

    # the Meta of the events leading to overflow
    events: typing.List[Event] = Field(alias='events')

    source: Source = Field(alias='source')

    # only relevant for GET, ignored in POST requests
    id: typing.Optional[int] = Field(None, alias='id')

    # only relevant for LAPI->CAPI, ignored for cscli->LAPI and crowdsec->LAPI
    uuid: typing.Optional[str] = Field(None, alias='uuid')

    # only relevant for LAPI->CAPI, ignored for cscli->LAPI and crowdsec->LAPI
    machine_id: typing.Optional[str] = Field(None, alias='machine_id')

    # only relevant for GET, ignored in POST requests
    created_at: typing.Optional[str] = Field(None, alias='created_at')

    remediation: typing.Optional[bool] = Field(None, alias='remediation')

    decisions: typing.Optional[typing.List[Decision]] = Field(None, alias='decisions')

    meta: typing.Optional[Meta] = Field(None, alias='meta')

    labels: typing.Optional[AlertLabels] = Field(None, alias='labels')
    class Config:
        arbitrary_types_allowed = True
