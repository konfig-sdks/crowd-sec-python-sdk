# coding: utf-8

"""
    Swagger CrowdSec

    CrowdSec local API

    The version of the OpenAPI document: 1.0.0
    Contact: contact@crowdsec.net
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_sec_python_sdk import schemas  # noqa: F401


class Decision(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "duration",
            "scenario",
            "origin",
            "scope",
            "type",
            "value",
        }
        
        class properties:
            origin = schemas.StrSchema
            type = schemas.StrSchema
            scope = schemas.StrSchema
            value = schemas.StrSchema
            duration = schemas.StrSchema
            scenario = schemas.StrSchema
            id = schemas.IntSchema
            uuid = schemas.StrSchema
            until = schemas.StrSchema
            simulated = schemas.BoolSchema
            __annotations__ = {
                "origin": origin,
                "type": type,
                "scope": scope,
                "value": value,
                "duration": duration,
                "scenario": scenario,
                "id": id,
                "uuid": uuid,
                "until": until,
                "simulated": simulated,
            }
    
    duration: MetaOapg.properties.duration
    scenario: MetaOapg.properties.scenario
    origin: MetaOapg.properties.origin
    scope: MetaOapg.properties.scope
    type: MetaOapg.properties.type
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin"]) -> MetaOapg.properties.origin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scenario"]) -> MetaOapg.properties.scenario: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["until"]) -> MetaOapg.properties.until: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["simulated"]) -> MetaOapg.properties.simulated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["origin", "type", "scope", "value", "duration", "scenario", "id", "uuid", "until", "simulated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin"]) -> MetaOapg.properties.origin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scenario"]) -> MetaOapg.properties.scenario: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["until"]) -> typing.Union[MetaOapg.properties.until, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["simulated"]) -> typing.Union[MetaOapg.properties.simulated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["origin", "type", "scope", "value", "duration", "scenario", "id", "uuid", "until", "simulated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        duration: typing.Union[MetaOapg.properties.duration, str, ],
        scenario: typing.Union[MetaOapg.properties.scenario, str, ],
        origin: typing.Union[MetaOapg.properties.origin, str, ],
        scope: typing.Union[MetaOapg.properties.scope, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        value: typing.Union[MetaOapg.properties.value, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        until: typing.Union[MetaOapg.properties.until, str, schemas.Unset] = schemas.unset,
        simulated: typing.Union[MetaOapg.properties.simulated, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Decision':
        return super().__new__(
            cls,
            *args,
            duration=duration,
            scenario=scenario,
            origin=origin,
            scope=scope,
            type=type,
            value=value,
            id=id,
            uuid=uuid,
            until=until,
            simulated=simulated,
            _configuration=_configuration,
            **kwargs,
        )
