# coding: utf-8

"""
    Swagger CrowdSec

    CrowdSec local API

    The version of the OpenAPI document: 1.0.0
    Contact: contact@crowdsec.net
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from crowd_sec_python_sdk import schemas  # noqa: F401


class Source(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "scope",
            "value",
        }
        
        class properties:
            scope = schemas.StrSchema
            value = schemas.StrSchema
            ip = schemas.StrSchema
            range = schemas.StrSchema
            as_number = schemas.StrSchema
            as_name = schemas.StrSchema
            cn = schemas.StrSchema
            latitude = schemas.Float32Schema
            longitude = schemas.Float32Schema
            __annotations__ = {
                "scope": scope,
                "value": value,
                "ip": ip,
                "range": range,
                "as_number": as_number,
                "as_name": as_name,
                "cn": cn,
                "latitude": latitude,
                "longitude": longitude,
            }
    
    scope: MetaOapg.properties.scope
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["range"]) -> MetaOapg.properties.range: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["as_number"]) -> MetaOapg.properties.as_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["as_name"]) -> MetaOapg.properties.as_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cn"]) -> MetaOapg.properties.cn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["scope", "value", "ip", "range", "as_number", "as_name", "cn", "latitude", "longitude", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> typing.Union[MetaOapg.properties.ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["range"]) -> typing.Union[MetaOapg.properties.range, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["as_number"]) -> typing.Union[MetaOapg.properties.as_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["as_name"]) -> typing.Union[MetaOapg.properties.as_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cn"]) -> typing.Union[MetaOapg.properties.cn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["scope", "value", "ip", "range", "as_number", "as_name", "cn", "latitude", "longitude", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        scope: typing.Union[MetaOapg.properties.scope, str, ],
        value: typing.Union[MetaOapg.properties.value, str, ],
        ip: typing.Union[MetaOapg.properties.ip, str, schemas.Unset] = schemas.unset,
        range: typing.Union[MetaOapg.properties.range, str, schemas.Unset] = schemas.unset,
        as_number: typing.Union[MetaOapg.properties.as_number, str, schemas.Unset] = schemas.unset,
        as_name: typing.Union[MetaOapg.properties.as_name, str, schemas.Unset] = schemas.unset,
        cn: typing.Union[MetaOapg.properties.cn, str, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Source':
        return super().__new__(
            cls,
            *args,
            scope=scope,
            value=value,
            ip=ip,
            range=range,
            as_number=as_number,
            as_name=as_name,
            cn=cn,
            latitude=latitude,
            longitude=longitude,
            _configuration=_configuration,
            **kwargs,
        )
